{
  "openapi": "3.0.1",
  "info": {
    "title": "API Service",
    "version": "1.0.0",
    "description": "API Service endpoints",
    "contact": {
      "email": "sagi.hillel@gmail.com",
      "name": "Sagi Hillel"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Users APIs"
    }
  ],
  "paths": {
    "/user/add": {
      "post": {
        "tags": ["user"],
        "summary": "Add a user to the database",
        "operationId": "user-add",
        "requestBody": {
          "description": "New user signing up",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/user/id/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of user to retrieve"
          }
        ],
        "tags": ["user"],
        "summary": "Retrieve a user by ID",
        "operationId": "user-get",
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/BookSchema"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorSchema"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of user to remove"
          }
        ],
        "tags": ["user"],
        "summary": "Remove a user by ID",
        "operationId": "user-remove",
        "responses": {
          "204": {
            "description": "User removed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorSchema"
                }
              }
            }
          }
        }
      },
      "edit": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of user to remove"
          }
        ],
        "tags": ["user"],
        "summary": "Remove a user by ID",
        "operationId": "user-remove",
        "responses": {
          "204": {
            "description": "User removed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorSchema"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BadRequestSchema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "PATH: [author] ;; MESSAGE: \"author\" is required"
          }
        },
        "required": ["error"]
      },
      "ServerErrorSchema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Internal server error"
          }
        },
        "required": ["error"]
      },
      "NotFoundErrorSchema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Item not found"
          }
        },
        "required": ["error"]
      },

      "UserSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "id of the user",
            "example": "5d7224d3b-40b1a1a0-46697dd-46697dd"
          },
          "accountId": {
            "type": "string",
            "description": "accountId of the user",
            "example": "5d7224d3b-40b1a1a0-46697dd-46697dd"
          },
          "firstName": {
            "type": "string",
            "description": "first name of the user",
            "example": "Saul"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user",
            "example": "Goodman"
          },
          "email": {
            "type": "string",
            "description": "email of the user",
            "example": "saul.goodman@law.com"
          },
          "createdAt": {
            "type": "number",
            "description": "Created at timestamp in miliseconds",
            "example": 1616158942428
          },
          "updatedAt": {
            "type": "number",
            "description": "Updated at timestamp in miliseconds",
            "example": 1616158942428
          }
        },
        "required": [
          "uuid",
          "firsName",
          "lastName",
          "email",
          "createdAt",
          "updatedAt"
        ]
      }
    }
  }
}
